[{"/Users/vamsee/Developer/vNote/vnote/src/App.tsx":"1","/Users/vamsee/Developer/vNote/vnote/src/index.tsx":"2","/Users/vamsee/Developer/vNote/vnote/src/reportWebVitals.ts":"3","/Users/vamsee/Developer/vNote/vnote/src/Main.tsx":"4","/Users/vamsee/Developer/vNote/vnote/src/Vim.tsx":"5","/Users/vamsee/Developer/vNote/vnote/src/hooks/useApi.tsx":"6","/Users/vamsee/Developer/vNote/vnote/src/config.js":"7"},{"size":556,"mtime":1611707175644,"results":"8","hashOfConfig":"9"},{"size":484,"mtime":1611968888308,"results":"10","hashOfConfig":"9"},{"size":425,"mtime":1611707175645,"results":"11","hashOfConfig":"9"},{"size":14444,"mtime":1625439872241,"results":"12","hashOfConfig":"9"},{"size":5894,"mtime":1625438160740,"results":"13","hashOfConfig":"9"},{"size":4481,"mtime":1626000829026,"results":"14","hashOfConfig":"9"},{"size":131,"mtime":1626002153712,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1huwib0",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/vamsee/Developer/vNote/vnote/src/App.tsx",[],"/Users/vamsee/Developer/vNote/vnote/src/index.tsx",[],"/Users/vamsee/Developer/vNote/vnote/src/reportWebVitals.ts",[],["33","34"],"/Users/vamsee/Developer/vNote/vnote/src/Main.tsx",["35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51"],"import React, {useState, useEffect, useRef, useLayoutEffect} from 'react';\nimport useApi, {IPayload} from './hooks/useApi';\nimport Modal from 'react-modal'\nimport Vim from './Vim';\nimport './Main.css';\nimport './modal.css';\nvar dateFormat = require(\"dateformat\");\nModal.setAppElement('#root')\n\ntype orderByDate = 'date_created'|'date_updated'\ntype sortType = 'DESC'|'ASC'\ninterface ISearchFilters {\n  primary: string,\n  when: string,\n  date: null|Date,\n  order_by: orderByDate,\n  sort: sortType,\n}\n\ninterface IResult {\n  id: number,\n  title: string,\n  content: string,\n  date_created: Date,\n  date_updated: Date,\n  author: number\n}\n\nfunction Main():JSX.Element { \n\n  const [postId,updatePostId] = useState<number|null>(null)\n  const [content, updateContent] = useState<string>('');\n  const [auth, updateAuth] = useState<boolean>(false)\n  const [authModalIsOpen, setAuthModal] = useState(false)\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [vimKey, setVimKey] = useState(1)\n  const [searchPanelIsOpen, setSearchPanelIsOpen] = useState(false)\n  const [query, setQuery] = useState('')\n  const [results, setResults] = useState<null|Array<IResult>>(null)\n  const [previewId, setPreviewId] = useState<null|number>(null)\n  const [newChanges, setNewChanges] = useState(false)\n  const [safeChangeCallback, setSafeChangeCallback] = useState<null|(()=>void)>(null)\n  const [dialogChangesIsOpen, setDialogChangesIsOpen] = useState(false)\n  const [IoLinksIsOpen, setIoLinksIsOpen] = useState(false)\n  const [incomingLinks, setIncomingLinks] = useState<Array<IResult>>([])\n  const [outgoingLinks, setOutgoingLinks] = useState<Array<IResult>>([])\n  const [searchFilters, setSearchFilters] = useState<ISearchFilters>({\n    primary: 'date_created',\n    when: 'after',\n    date: null,\n    order_by: 'date_created',\n    sort: 'DESC'\n  })\n\n  const vimRef = useRef<Vim>(null)\n\n  const apiUrl = '/'\n\n  const opts = {\n    username: username,\n    password: password,\n    fail: forceLogin\n  }\n\n  const defaultPayload = {\n    path: 'notes/validateAuth/',\n      method: 'GET',\n      body: null,\n      callback: loginAction\n  }\n\n  const [payload, setPayload] = useState<IPayload>(defaultPayload)\n  useApi(opts, payload)\n\n\n  function loginAction(res:any){\n    updateAuth(true)\n    setAuthModal(false)\n    setUsername(res.auth)\n  }\n  function openAuthModal(){ setAuthModal(true) }\n  function closeAuthModal(){\n    if(auth){ setAuthModal(false) }\n  }\n\n  function _setResults(res:Array<any>){\n    var parsed_results:Array<IResult> = res.map(x=>({\n      ...x,\n      date_created: new Date(x.date_created),\n      date_updated: new Date(x.date_updated),\n    }))\n    return setResults(parsed_results)\n  }\n\n  function write(Content:string, callback:()=>void){\n    // This function is passed to vim for :w\n    // It must distinguish between a new file vs saving a new file\n    if(postId === null){\n      var pl = {\n        path: 'notes/',\n        method: 'POST',\n        body: {content: Content},\n      }\n    } else {\n      var pl = {\n        path: 'notes/'+postId+'/',\n        method: 'PUT',\n        body: {content: Content},\n      }\n    }\n    const PayLoad = {...pl, callback:(res:any)=>{\n      updatePostId(res.id)\n      getOutLinks()\n      setNewChanges(false)\n      // dev: try and extract the filename and print it on the status bar\n      callback()\n      console.log(res)\n    }}\n\n    setPayload(PayLoad)\n  }\n\n  function quit(override=false){\n\n    const PayLoad = {\n      path: '',\n      method: 'logout',\n      body: '',\n      callback:(res:null)=>{\n        updatePostId(null)\n        if(vimRef.current){\n          vimRef.current.flush('')\n        }\n        updateAuth(false)\n        setAuthModal(true)\n      }\n    }\n    if(override){\n      setPayload(PayLoad)\n    } else{\n      safeClose(()=>{\n        setPayload(PayLoad)\n      })\n    }\n  }\n\n\n  function safeClose(callback:()=>void){\n    if(newChanges === false){\n      callback()\n    } else {\n      setSafeChangeCallback(()=>()=>callback())\n    }\n  }\n\n  function newFile(){\n      safeClose(()=>{\n        updatePostId(null)\n        setIncomingLinks([])\n        setOutgoingLinks([])\n        if(vimRef.current){\n          vimRef.current.flush('')\n        }\n        setNewChanges(false)\n      })\n  }\n  \n  function openDocument(){\n    if(previewId){\n      // check for unsaved changes\n      setSearchPanelIsOpen(false)\n      setIoLinksIsOpen(false)\n      \n      safeClose(()=>{\n        updatePostId(previewId)\n        setPreviewId(null)\n      })\n    }\n  }\n\n\n  function insertDocument(){\n    if(results){\n      const result = results.filter(x=>x['id']==previewId)[0]\n      var itext = '['+result['title']+']'+'(VID='+result['id']+')'\n      if(vimRef.current){\n        vimRef.current.insert(itext)\n        setSearchPanelIsOpen(false)\n      }\n    }\n  }\n  function deleteDocument(){}\n\n  function forceLogin(){\n    setAuthModal(true)\n    updateAuth(false)\n  }\n  \n  function submitLogin(){\n    const payload = {\n      path:'notes/validateAuth/',\n      method: 'GET',\n      body: null,\n      callback: loginAction\n    }\n    setPayload(payload)\n  }\n\n  function getBacklinks(){\n    const payload = {\n      path: 'notes/'+postId+'/getBacklinks/',\n      method: 'GET',\n      body: null,\n      callback:(res:any)=>{\n        setIncomingLinks(res)\n      }\n    }\n    setPayload(payload)\n  }\n\n  function getOutLinks(){\n    console.log('getting outlinks')\n    const payload = {\n      path: 'notes/'+postId+'/getOutlinks/',\n      method: 'GET',\n      body: null,\n      callback:(res:any)=>{\n        console.log(res)\n        setOutgoingLinks(res)\n      }\n    }\n    setPayload(payload)\n  }\n\n  function executeQuery(){\n    const payload = {\n      path: 'notes/search/?query='+query,\n      method: 'GET',\n      body: null,\n      callback: (res:any)=>{\n        console.log(res)\n        _setResults(res)\n        // Todo handle null results\n      }\n    }\n    setPayload(payload)\n    setPreviewId(null)\n  }\n\n  useEffect(()=>{\n    if(auth && postId){\n      console.log('selected new post:'+postId)\n      // logged in & postId has changed...\n      const payload = {\n        path: 'notes/'+postId+'/',\n        method: 'GET',\n        body: null,\n        callback: (result:any)=> {\n          console.log('got a new result!')\n          updateContent(result.content)\n          getBacklinks()\n          getOutLinks()\n          setNewChanges(false)\n        }\n      }\n      setPayload(payload)\n      // getBacklinks()\n    }\n  },[postId])\n\n  useEffect(()=>{\n    // when content is updated, trigger reload by changing the VimKey\n    if(vimRef.current){\n      vimRef.current.flush(content)\n    }\n  },[content])\n\n  useEffect(()=>{\n    console.log(searchFilters)\n  },[searchFilters])\n\n  useEffect(()=>{\n    console.log('Safe Change Callback Set')\n    if(safeChangeCallback !== null){\n      setDialogChangesIsOpen(true)\n    }\n  },[safeChangeCallback])\n\n  function resultRows(data:Array<IResult>){\n    return(\n      <div>{data !== null &&\n        data.map(row=>{\n        var selectedPreview = row['id'] == previewId ? 'selectedRow':''\n        return (\n          <div className={'searchResult '+selectedPreview} onClick={()=>{\n            if(previewId==row['id']){\n              setPreviewId(null)\n            } else{\n              setPreviewId(row['id'])\n            }\n          }}>\n            <div className=\"searchResults_wrapper\">\n              <div className=\"searchResultTitle\">{row['title']}</div>\n              <div className=\"searchResultDate\">{dateFormat(row[searchFilters.order_by],'dd/mmm/yyyy')}</div>\n\n              </div>\n          </div>\n        )\n      })}</div> \n    )\n  }\n\n  function filteredResults(results:Array<IResult>){\n    var fresults = results.filter(x=>{\n      if(searchFilters.date!==null){\n        if(searchFilters.when==='before'){\n          return x[searchFilters.order_by] <= searchFilters.date\n        }\n        if(searchFilters.when==='after'){\n          return x[searchFilters.order_by] >= searchFilters.date\n        }\n      } else {\n        return true\n      }\n    })\n    fresults.sort((a,b)=>{\n      if(searchFilters.sort==='ASC'){\n        return a[searchFilters.order_by].getTime()-b[searchFilters.order_by].getTime()\n      } else {\n        return b[searchFilters.order_by].getTime()-a[searchFilters.order_by].getTime()\n      }\n    })\n    return fresults\n  }\n\n  return (\n    <div className='main'>\n      <Vim  content={content} save={write} quit={quit} ref={vimRef} changesCallback={setNewChanges}/>\n      <Modal\n        isOpen={authModalIsOpen}\n        onRequestClose={closeAuthModal}\n        className='SearchModal'\n        overlayClassName='SearchOverlay'\n        >\n        <div className=\"IoLinks_wrapper\">\n        <div className=\"IoLinks_incoming\">\n        \n        <form onSubmit={(e)=>{\n          e.preventDefault()\n          submitLogin()\n        }}>\n            <input name='username' className='greenput_narrow' onChange={(e)=>{\n              setUsername(e.target.value)\n            }}/><br />\n            <input type=\"password\" name='password' className='greenput_narrow' onChange={(e)=>{\n              setPassword(e.target.value)\n            }}/><br />\n            <button className='greenput_narrow' type=\"submit\">Login</button>\n          </form>\n        \n        </div>\n        <div className=\"IoLinks_outgoing\"><h1>NullDisk</h1><ul><li>Military Grade Encryption</li><li>Zettelkasten Schema</li><li>VIM Keybindings</li></ul></div>\n        </div>\n        </Modal> \n\n        <Modal\n        isOpen={searchPanelIsOpen}\n        onRequestClose={()=>setSearchPanelIsOpen(false)}\n        className='SearchModal'\n        overlayClassName='SearchOverlay'\n        >\n          <div className=\"searchBox\">\n            <form action=\"#\" autoComplete=\"off\" onSubmit={(e)=>{\n              e.preventDefault()\n              executeQuery()\n            }}>\n            <input className='greenput' name=\"query\" autoFocus onChange={(e)=>setQuery(e.target.value)}/>\n            <select className='greenput_narrow' onChange={(e)=>setSearchFilters({...searchFilters,primary:e.target.value})}>\n              <option value='date_created'>Created</option>\n              <option value=\"date_updated\">Updated</option>\n            </select>\n            <select className='greenput_narrow' onChange={(e)=>setSearchFilters({...searchFilters,when:e.target.value})}>\n              <option value=\"after\">After</option>\n              <option value=\"before\">Before</option>\n            </select>\n            <input className='greenput_narrow' type=\"date\" onChange={(e)=>setSearchFilters({...searchFilters,date:(e.target.value===''?null:new Date(e.target.value))})} />\n            &nbsp; :: &nbsp;\n            <select className='greenput_narrow' onChange={(e)=>setSearchFilters({...searchFilters,order_by:e.target.value as orderByDate})}>\n              <option value='date_created'>Created</option>\n              <option value=\"date_updated\">Updated</option>\n            </select>\n            <select className='greenput_narrow' onChange={(e)=>setSearchFilters({...searchFilters,sort:e.target.value as sortType})}>\n              <option value=\"DESC\">DESC</option>\n              <option value=\"ASC\">ASC</option>\n            </select>\n            </form>\n\n          {previewId !==null &&\n          <div className=\"searchButtonsWrapper\">\n            <div className=\"button_open button\" onClick={openDocument}>Open</div>\n            <div className=\"button_insert button\" onClick={insertDocument}>Insert</div>\n            <div className=\"button_delete button\" onClick={deleteDocument}>Delete</div>\n          </div>\n          }\n\n          <div className=\"searchResults\">\n          {results !==null && results.some(x=>x) &&\n            resultRows(filteredResults(results))\n          }\n          </div>\n          <div className=\"spacer\"></div>\n          <div className=\"searchPreview\"><pre>\n          {previewId !== null && results !==null &&\n            results.filter(x=>x['id']==previewId).map(prev=>prev['content']) \n          }\n          {previewId ===null && (<span>search for a document to preview it here</span>)}\n          </pre></div>\n          </div>\n        </Modal>\n\n        <Modal isOpen={ dialogChangesIsOpen } className=\"SearchModal\" overlayClassName=\"SearchOverlay\"><div className=\"alertBox\">\n          <span className=\"alertText\">Warning! You have unsaved changes.</span>\n          <div className=\"button\" onClick={()=>{\n            if(safeChangeCallback !==null){\n              safeChangeCallback()\n            }\n            setDialogChangesIsOpen(false)\n          }}>Override</div>\n          <div className=\"button\" onClick={()=>setDialogChangesIsOpen(false)}>Close</div>\n          </div></Modal>\n\n          <Modal isOpen={IoLinksIsOpen} className=\"SearchModal\" overlayClassName=\"SearchOverlay\" onRequestClose={()=>setIoLinksIsOpen(false)}>\n        <div className=\"IoLinks_wrapper\">\n        <div className=\"IoLinks_incoming\"><span className=\"title\">Incoming Links</span>\n            {incomingLinks !==null && \n            resultRows(incomingLinks)}\n          </div>\n          <div className=\"IoLinks_outgoing\"><span className=\"title\">Outgoing Links</span>\n            {outgoingLinks !==null &&\n            resultRows(outgoingLinks)}\n          </div>\n          {(previewId && incomingLinks !==null && outgoingLinks !==null) && (incomingLinks.filter(x=>x['id']==previewId).length>0 || outgoingLinks.filter(x=>x['id']==previewId).length>0) &&\n            <div className=\"button\" onClick={openDocument}>Open</div>\n          }\n          <div className=\"IoLinks_preview\">\n            <pre>\n              {previewId && incomingLinks &&\n                incomingLinks.filter(object=>object['id']==previewId).map(res=>res['content'])\n              }\n              {previewId && outgoingLinks &&\n                outgoingLinks.filter(object=>object['id']==previewId).map(res=>res['content'])\n              }\n            </pre>\n          </div>\n        </div>\n        </Modal>\n\n          <div className=\"main_buttons_wrapper\">\n            <div className=\"button\" onClick={()=>setSearchPanelIsOpen(true)}>Explorer</div>\n            <div className=\"button\" onClick={()=>newFile()}>New File</div>\n            <div className=\"button\" onClick={()=>setIoLinksIsOpen(true)}><span style={(incomingLinks.length>0||outgoingLinks.length>0) ? ({color:'red', fontWeight:'bold'}) : ({}) }>Connections { incomingLinks.length}/{outgoingLinks.length}</span></div>\n          </div>\n    </div>\n  )\n}\n\nexport default Main\n",["52","53"],"/Users/vamsee/Developer/vNote/vnote/src/Vim.tsx",["54"],"/Users/vamsee/Developer/vNote/vnote/src/hooks/useApi.tsx",["55","56","57","58","59"],"/Users/vamsee/Developer/vNote/vnote/src/config.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":1,"column":45,"nodeType":"66","messageId":"67","endLine":1,"endColumn":60},{"ruleId":"64","severity":1,"message":"68","line":37,"column":10,"nodeType":"66","messageId":"67","endLine":37,"endColumn":16},{"ruleId":"64","severity":1,"message":"69","line":37,"column":18,"nodeType":"66","messageId":"67","endLine":37,"endColumn":27},{"ruleId":"64","severity":1,"message":"70","line":58,"column":9,"nodeType":"66","messageId":"67","endLine":58,"endColumn":15},{"ruleId":"64","severity":1,"message":"71","line":82,"column":12,"nodeType":"66","messageId":"67","endLine":82,"endColumn":25},{"ruleId":"72","severity":1,"message":"73","line":106,"column":11,"nodeType":"66","messageId":"74","endLine":106,"endColumn":13},{"ruleId":"75","severity":1,"message":"76","line":185,"column":47,"nodeType":"77","messageId":"78","endLine":185,"endColumn":49},{"ruleId":"79","severity":1,"message":"80","line":186,"column":42,"nodeType":"77","messageId":"81","endLine":186,"endColumn":43},{"ruleId":"82","severity":1,"message":"83","line":270,"column":5,"nodeType":"84","endLine":270,"endColumn":13,"suggestions":"85"},{"ruleId":"75","severity":1,"message":"76","line":294,"column":41,"nodeType":"77","messageId":"78","endLine":294,"endColumn":43},{"ruleId":"75","severity":1,"message":"76","line":297,"column":25,"nodeType":"77","messageId":"78","endLine":297,"endColumn":27},{"ruleId":"86","severity":1,"message":"87","line":315,"column":36,"nodeType":"88","messageId":"89","endLine":315,"endColumn":38},{"ruleId":"75","severity":1,"message":"76","line":415,"column":38,"nodeType":"77","messageId":"78","endLine":415,"endColumn":40},{"ruleId":"75","severity":1,"message":"76","line":443,"column":109,"nodeType":"77","messageId":"78","endLine":443,"endColumn":111},{"ruleId":"75","severity":1,"message":"76","line":443,"column":165,"nodeType":"77","messageId":"78","endLine":443,"endColumn":167},{"ruleId":"75","severity":1,"message":"76","line":449,"column":58,"nodeType":"77","messageId":"78","endLine":449,"endColumn":60},{"ruleId":"75","severity":1,"message":"76","line":452,"column":58,"nodeType":"77","messageId":"78","endLine":452,"endColumn":60},{"ruleId":"60","replacedBy":"90"},{"ruleId":"62","replacedBy":"91"},{"ruleId":"64","severity":1,"message":"92","line":1,"column":16,"nodeType":"66","messageId":"67","endLine":1,"endColumn":35},{"ruleId":"93","severity":1,"message":"94","line":42,"column":16,"nodeType":"95","messageId":"96","endLine":42,"endColumn":17,"fix":"97"},{"ruleId":"82","severity":1,"message":"98","line":56,"column":7,"nodeType":"84","endLine":56,"endColumn":16,"suggestions":"99"},{"ruleId":"82","severity":1,"message":"100","line":91,"column":7,"nodeType":"84","endLine":91,"endColumn":25,"suggestions":"101"},{"ruleId":"82","severity":1,"message":"102","line":97,"column":7,"nodeType":"84","endLine":97,"endColumn":26,"suggestions":"103"},{"ruleId":"82","severity":1,"message":"104","line":134,"column":7,"nodeType":"84","endLine":134,"endColumn":26,"suggestions":"105"},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"@typescript-eslint/no-unused-vars","'useLayoutEffect' is defined but never used.","Identifier","unusedVar","'vimKey' is assigned a value but never used.","'setVimKey' is assigned a value but never used.","'apiUrl' is assigned a value but never used.","'openAuthModal' is defined but never used.","@typescript-eslint/no-redeclare","'pl' is already defined.","redeclared","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'auth', 'getBacklinks', and 'getOutLinks'. Either include them or remove the dependency array.","ArrayExpression",["108"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["106"],["107"],"'useImperativeHandle' is defined but never used.","rest-spread-spacing","Unexpected whitespace after spread property operator.","SpreadElement","unexpectedWhitespace",{"range":"109","text":"110"},"React Hook useCallback has a missing dependency: 'logout'. Either include it or remove the dependency array.",["111"],"React Hook useEffect has a missing dependency: 'refreshKey'. Either include it or remove the dependency array.",["112"],"React Hook useEffect has a missing dependency: 'go'. Either include it or remove the dependency array.",["113"],"React Hook useEffect has missing dependencies: 'props' and 'setRefreshKey'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},[1342,1343],"",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [auth, getBacklinks, getOutLinks, postId]",{"range":"125","text":"126"},"Update the dependencies array to be: [logout, payload]",{"range":"127","text":"128"},"Update the dependencies array to be: [accessKeyIsValid, refreshKey]",{"range":"129","text":"130"},"Update the dependencies array to be: [accessKey, go, payload]",{"range":"131","text":"132"},"Update the dependencies array to be: [props, refreshKeyIsValid, setRefreshKey]",{"range":"133","text":"134"},[6465,6473],"[auth, getBacklinks, getOutLinks, postId]",[1774,1783],"[logout, payload]",[2978,2996],"[accessKeyIsValid, refreshKey]",[3117,3136],"[accessKey, go, payload]",[4433,4452],"[props, refreshKeyIsValid, setRefreshKey]"]